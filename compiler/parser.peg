{
  package compiler

  func toSlice(v interface{}) []interface{} {
    if v == nil {
      return nil
    }
    return v.([]interface{})
  }

  func pos(p position) Position {
    return Position {
      Line: p.line,
      Col: p.col,
      Offset: p.offset,
    }
  }

  func binary(first, rest interface{}, curpos position) (Expression, error) {
    restElem := toSlice(rest)

    if len(restElem) == 0 {
      return first.(Expression), nil
    }

    var cur Expression = first.(Expression)

    for _, x := range restElem {
      elem := toSlice(x)
      cur = &BinaryExpression{X: cur, Y: elem[3].(Expression), Op: elem[1].(string), GraphNode: NewNode(pos(curpos))}
    }

    return cur, nil
  }
}

Input <- l:List EOF {
  return &Root{List: l.(*List), GraphNode: NewNode(pos(c.pos))}, nil
}

List <- node:ListNode list:List {
  listItem := list.(*List)
  if node != nil {
    listItem.Nodes = append([]Node{node.(Node)}, listItem.Nodes...)
  }
  listItem.Position = pos(c.pos)

  return listItem, nil
} / &(Outdent / EOF) {
  return &List{GraphNode: NewNode(pos(c.pos))}, nil
}

IndentedList <- Indent list:List Outdent {
  return list, nil
}

IndentedRawText <- Indent t:RawText Outdent {
  return &Text{Value: t.(string), GraphNode: NewNode(pos(c.pos))}, nil
}

RawText <- Indent rt:RawText Outdent tail:RawText {
  return rt.(string) + tail.(string), nil
} / (&Outdent / &EOF) {
  return "", nil
} / head:. tail:RawText {
  return string(head.([]byte)) + tail.(string), nil
}

ListNode "listnode" <-
  Comment /
  Import /
  Extend /
  PipeText /
  PipeExpression /
  If /
  Unless /
  Each /
  DocType /
  Mixin /
  MixinCall /
  Assignment /
  Block /
  Tag /
  (_ [\n]) { return nil, nil }

// Misc
DocType "doctype" = _ "doctype" _ val:LineText NL {
  return &DocType{Value: val.(string), GraphNode: NewNode(pos(c.pos))}, nil
}

// Tags

Tag <- tag:TagHeader list:IndentedList? {
  tagElem := tag.(*Tag)

  if list != nil {
    if tagElem.Block != nil {
      tagElem.Block = &List{GraphNode: NewNode(pos(c.pos)), Nodes: []Node{tagElem.Block, list.(Node)}}
    } else {
      tagElem.Block = list.(*List)
    }
  }

  return tagElem, nil
}

TagHeader <- _ name:TagName attrs:TagAttributes? selfClose:'/'? tl:(__ TextList?)? NL {
  tag := &Tag{Name: name.(string), GraphNode: NewNode(pos(c.pos))}
  if attrs != nil {
    tag.Attributes = attrs.([]*Attribute)
  }
  if tl != nil {
    tag.Text = toSlice(tl)[1].(*TextList)
  }
  if selfClose != nil {
    tag.SelfClose = true
  }
  return tag, nil
} / _ name:TagName attrs:TagAttributes? '.' NL text:IndentedRawText? {
  tag := &Tag{Name: name.(string), GraphNode: NewNode(pos(c.pos))}
  if attrs != nil {
    tag.Attributes = attrs.([]*Attribute)
  }
  if text != nil {
    tag.Block = text.(*Text)
  }
  return tag, nil
} / _ name:TagName attrs:TagAttributes? ':' block:ListNode {
  tag := &Tag{Name: name.(string), GraphNode: NewNode(pos(c.pos))}
  if attrs != nil {
    tag.Attributes = attrs.([]*Attribute)
  }
  if block != nil {
    tag.Block = block.(Node)
  }
  return tag, nil
} / _ name:TagName attrs:TagAttributes? unescaped:'!'? '=' __ expr:Expression? NL {
  tag := &Tag{Name: name.(string), GraphNode: NewNode(pos(c.pos))}
  if attrs != nil {
    tag.Attributes = attrs.([]*Attribute)
  }
  if expr != nil {
    intr := &Interpolation{Expr: expr.(Expression), GraphNode: NewNode(pos(c.pos))}
    if unescaped != nil {
      intr.Unescaped = true
    }
    tag.Block = &TextList{Nodes: []Node{intr}, GraphNode: NewNode(pos(c.pos))}
  }
  return tag, nil
}

TagName <- [_a-zA-Z] [_-:a-zA-Z0-9]* {
  return string(c.text), nil
} / (&TagAttributeClass / &TagAttributeID) {
  return "div", nil
}

TagAttributes <- head:(TagAttributeClass / TagAttributeID) tail:TagAttributes? {
  tailElem := []*Attribute{}

  if tail != nil {
    tailElem = tail.([]*Attribute)
  }

  return append(head.([]*Attribute), tailElem...), nil
} / head:('(' _ (TagAttribute ((__ / (_ ',' _)) TagAttribute)*) _ ')') tail:TagAttributes? {
  tailElem := []*Attribute{}

  if tail != nil {
    tailElem = tail.([]*Attribute)
  }

  vals := toSlice(toSlice(head)[2]);

  if len(vals) == 0 {
    return tailElem, nil;
  }

  headAttrs := vals[0].([]*Attribute)
  restAttrs := toSlice(vals[1]);

  for _, a := range restAttrs {
    restAttr := toSlice(a)
    headAttrs = append(headAttrs, restAttr[1].([]*Attribute)...)
  }

  return append(headAttrs, tailElem...), nil
}

TagAttributeClass <- '.' name:ClassName {
  return []*Attribute{&Attribute{Name: "class", Value: &StringExpression{Value: name.(string)}, GraphNode: NewNode(pos(c.pos))}}, nil
}

TagAttributeID <- '#' name:IdName {
  return []*Attribute{&Attribute{Name: "id", Value: &StringExpression{Value: name.(string)}, GraphNode: NewNode(pos(c.pos))}}, nil
}

TagAttribute <- name:TagAttributeName _ '=' _ value:Expression {
  return []*Attribute{&Attribute{Name: name.(string), Value: value.(Expression), GraphNode: NewNode(pos(c.pos))}}, nil
} / name:TagAttributeName _ "!=" _ value:Expression {
  return []*Attribute{&Attribute{Name: name.(string), Value: value.(Expression), Unescaped: true, GraphNode: NewNode(pos(c.pos))}}, nil
} / name:TagAttributeName {
  return []*Attribute{&Attribute{Name: name.(string), GraphNode: NewNode(pos(c.pos))}}, nil
}

TagAttributeName <- '(' tn:TagAttributeNameLiteral ')' {
  return tn, nil
} / '[' tn:TagAttributeNameLiteral ']' {
  return tn, nil
} / tn:TagAttributeNameLiteral {
  return tn, nil
} / String

ClassName <- Name
IdName <- Name

TagAttributeNameLiteral <- [@_a-zA-Z] [._-:a-zA-Z0-9]* {
  return string(c.text), nil
}

// Logic
If <- _ "if" __ expr:Expression _ NL block:IndentedList elseNode:Else? {
  ifElem := &If{Condition: expr.(Expression), PositiveBlock: block.(Node), GraphNode: NewNode(pos(c.pos))}
  if elseNode != nil {
    ifElem.NegativeBlock = elseNode.(Node)
  }
  return ifElem, nil
}

Unless <- _ "unless" __ expr:Expression _ NL block:IndentedList {
  condition := &UnaryExpression{
    Op: "!",
    X: expr.(Expression),
  }

  return &If{Condition: condition, PositiveBlock: block.(Node), GraphNode: NewNode(pos(c.pos))}, nil
}

Else <- _ "else" node:If {
  return node, nil
} / _ "else" _ NL block:IndentedList {
  return block, nil
}

Each <- _ "each" __ v1:Variable v2:(_ ',' _ Variable)? _ "in" _ expr:Expression _ NL block:IndentedList {
  eachElem := &Each{GraphNode: NewNode(pos(c.pos)), Block: block.(Node), ElementVariable: v1.(*Variable), Container: expr.(Expression)}
  v2Slice := toSlice(v2)

  if len(v2Slice) != 0 {
    eachElem.IndexVariable = v2Slice[3].(*Variable)
  }

  return eachElem, nil
}

Assignment <- _ '-' _ ("var" / "let" / "const") __ vr:Variable _ '=' _ expr:Expression _ NL {
  return &Assignment{Variable: vr.(*Variable), Expression: expr.(Expression), GraphNode: NewNode(pos(c.pos))}, nil
}

// Mixin
Mixin <- _ "mixin" __ name:Name _ args:MixinArguments? NL list:IndentedList {
  mixinElem := &Mixin{Name: name.(string), Block: list.(Node), GraphNode: NewNode(pos(c.pos))}
  if args != nil {
    mixinElem.Arguments = args.([]MixinArgument)
  }
  return mixinElem, nil
}

MixinArguments <- '(' head:MixinArgument tail:(_ ',' _ MixinArgument)* ')' {
  args := []MixinArgument{head.(MixinArgument)}

  if tail != nil {
    tailSlice := toSlice(tail)

    for _, arg := range tailSlice {
      argSlice := toSlice(arg)
      args = append(args, argSlice[3].(MixinArgument))
    }
  }

  return args, nil
} / '(' _ ')' {
  return nil, nil
}

MixinArgument <- name:Variable def:(_ '=' _ Expression)? {
  argElem := MixinArgument{Name: name.(*Variable), GraphNode: NewNode(pos(c.pos))}

  if def != nil {
    defSlice := toSlice(def)
    argElem.Default = defSlice[3].(Expression);
  }

  return argElem, nil
}

MixinCall <- _ '+' name:Name _ args:CallArguments? NL {
  mcElem := &MixinCall{Name: name.(string), GraphNode: NewNode(pos(c.pos))}
  if args != nil {
    mcElem.Arguments = args.([]Expression)
  }
  return mcElem, nil
}

CallArguments <- '(' head:Expression? tail:(_ ',' _ Expression)* ')' {
  args := []Expression{}

  if head != nil {
    args = append(args, head.(Expression))
  }

  if tail != nil {
    tailSlice := toSlice(tail)

    for _, arg := range tailSlice {
      argSlice := toSlice(arg)
      args = append(args, argSlice[3].(Expression))
    }
  }

  return args, nil
}

// Import & Extend

Import <- _ "include" 's'? __ file:LineText NL {
  return &Import{File: file.(string), GraphNode: NewNode(pos(c.pos))}, nil
}

Extend <- "extend" 's'? __ file:LineText NL {
  return &Extend{File: file.(string), GraphNode: NewNode(pos(c.pos))}, nil
}

Block <- _ "block" mod:(__ ("append" / "prepend"))? __ name:Name NL list:IndentedList? {
  block := &Block{Name: name.(string), GraphNode: NewNode(pos(c.pos))}

  if mod != nil {
    modSlice := toSlice(mod)

    if string(modSlice[1].([]byte)) == "append" {
      block.Modifier = "append"
    } else {
      block.Modifier = "prepend"
    }
  }

  if list != nil {
    block.Block = list.(*List)
  }

  return block, nil
}

// Comments
Comment <- _ "//" silent:'-'? _ comment:LineText NL {
  isSilent := silent != nil
  return &Comment{Value: comment.(string), Silent: isSilent, GraphNode: NewNode(pos(c.pos))}, nil
}

LineText <- [^\n]* {
  return string(c.text), nil
}

// Text
PipeText <- _ ('|' / '<') _ tl:TextList NL {
  return tl, nil
}

PipeExpression <- _ mod:("=" / "!=") _ ex:Expression NL {
  intr := &Interpolation{Expr: ex.(Expression), GraphNode: NewNode(pos(c.pos))}

  if string(mod.([]byte)) == "!=" {
    intr.Unescaped = true
  }

  return intr, nil
}

TextList <- intr:Interpolation tl:TextList {
  intNode := intr.(*Interpolation)

  if tl != nil {
    tlnode := tl.(*TextList);
    return &TextList{
      Nodes: append([]Node{intNode}, tlnode.Nodes...),
      GraphNode: NewNode(pos(c.pos)),
    }, nil
  }

  return TextList{
    Nodes: []Node{intNode},
    GraphNode: NewNode(pos(c.pos)),
  }, nil
} / &NL {
  return &TextList{GraphNode: NewNode(pos(c.pos))}, nil
} / ch:. tl:TextList {
  tlnode := tl.(*TextList);
  chstr := string(ch.([]byte))

  if len(tlnode.Nodes) > 0 {
    if tn, ok := tlnode.Nodes[0].(*Text); ok {
      tlnode.Nodes[0] = &Text{Value: chstr + tn.Value}
      return tlnode, nil
    }
  }

  tlnode.Nodes = append([]Node{&Text{Value: chstr, GraphNode: NewNode(pos(c.pos))}}, tlnode.Nodes...)
  tlnode.Position = pos(c.pos)

  return tlnode, nil
}

Indent <- "\u0001"
Outdent <- "\u0002"

Interpolation <- mod:('#' / '!') '{' _ expr:Expression _ '}' {
  intElem := &Interpolation{Expr: expr.(Expression), GraphNode: NewNode(pos(c.pos))}
  if string(mod.([]byte)) == "!" {
    intElem.Unescaped = true
  }
  return intElem, nil
}

Expression <- ExpressionTernery

ExpressionTernery <- cnd:ExpressionBinOp rest:(_ '?' _ ExpressionTernery _ ':' _ ExpressionTernery)? {
  if rest == nil {
    return cnd, nil
  }

  restSlice := toSlice(rest)

  return &BinaryExpression{
    X: &BinaryExpression {
      X: cnd.(Expression),
      Y: restSlice[3].(Expression),
      Op: "&&" ,
      GraphNode: NewNode(pos(c.pos)),
    },
    Y: restSlice[7].(Expression),
    Op: "||",
    GraphNode: NewNode(pos(c.pos)),
  }, nil
}

ExpressionBinOp <- first:ExpressionCmpOp rest:( _ BinOp _ ExpressionBinOp )* {
  return binary(first, rest, c.pos)
}

ExpressionCmpOp <- first:ExpressionAddOp rest:( _ CmpOp _ ExpressionCmpOp )* {
  return binary(first, rest, c.pos)
}

ExpressionAddOp <- first:ExpressionMulOp rest:( _ AddOp _ ExpressionAddOp )* {
  return binary(first, rest, c.pos)
}

ExpressionMulOp <- first:ExpressionUnaryOp rest:( _ MulOp _ ExpressionMulOp )* {
  return binary(first, rest, c.pos)
}

ExpressionUnaryOp <- op:UnaryOp _ ex:ExpressionFactor {
  return &UnaryExpression{X: ex.(Expression), Op: op.(string), GraphNode: NewNode(pos(c.pos))}, nil
} / ExpressionFactor

ExpressionFactor <- '(' e:Expression ')' {
  return e, nil
} / StringExpression / NumberExpression / BooleanExpression / NilExpression / MemberExpression / ArrayExpression

StringExpression <- s:String {
  return &StringExpression{Value: s.(string), GraphNode: NewNode(pos(c.pos))}, nil
}

NumberExpression <- '-'? Integer dec:( '.' DecimalDigit+ )? ex:Exponent? {
  if dec != nil || ex != nil {
    val, err := strconv.ParseFloat(string(c.text), 64);
    return &FloatExpression{Value: val, GraphNode: NewNode(pos(c.pos))}, err
  } else {
    val, err := strconv.ParseInt(string(c.text), 10, 64)
    return &IntegerExpression{Value: val, GraphNode: NewNode(pos(c.pos))}, err
  }
}

NilExpression <- Null {
  return &NilExpression{GraphNode: NewNode(pos(c.pos))}, nil
}

BooleanExpression <- b:Bool {
  return &BooleanExpression{Value: b.(bool), GraphNode: NewNode(pos(c.pos))}, nil
}

MemberExpression <- field:Field member:(MemberField / MemberIndex / MemberCall)* {
  memberSlice := toSlice(member)
  cur := field.(Expression)

  for _, m := range memberSlice {
    switch sub := m.(type) {
      case string:
        cur = &MemberExpression{X: cur, Name: sub, GraphNode: NewNode(pos(c.pos))}
      case Expression:
        cur = &IndexExpression{X: cur, Index: sub, GraphNode: NewNode(pos(c.pos))}
      case []Expression:
        cur = &FunctionCallExpression{X: cur, Arguments: sub, GraphNode: NewNode(pos(c.pos))}
    }
  }

  return cur, nil
}

MemberField <- '.' ident:Identifier {
  return ident, nil
}

MemberIndex <- _ '[' _ i:Expression _ ']' {
  return i, nil
}

MemberCall <- _ arg:CallArguments {
  return arg, nil
}

ArrayExpression <- '[' _ head:Expression? tail:(_ ',' _ Expression)* _ ']' {
  expressions := []Expression{}
  if head != nil {
    expressions = append(expressions, head.(Expression))
  }
  tailSlice := toSlice(tail)
  for _, ex := range tailSlice {
    exSlice := toSlice(ex)
    expressions = append(expressions, exSlice[3].(Expression))
  }
  return &ArrayExpression{Expressions: expressions, GraphNode: NewNode(pos(c.pos))}, nil
}

ObjectExpression <- '{' _ vals:(ObjectKey _ ':' _ Expression (_ ',' _ ObjectKey _ ':' _ Expression)*)? _ '}' {
  items := map[string]Expression{}
  valsSlice := toSlice(vals)

  if len(valsSlice) != 0 {
    fKey := valsSlice[0].(string)
    fEx := valsSlice[4].(Expression);
    items[fKey] = fEx;

    rest := toSlice(valsSlice[5]);
    for _, r := range rest {
      rSlice := toSlice(r)

      rKey := rSlice[3].(string)
      rEx := rSlice[7].(Expression)
      items[rKey] = rEx
    }
  }

  return &ObjectExpression{Expressions: items, GraphNode: NewNode(pos(c.pos))}, nil
}

ObjectKey <- String / Identifier

Field <- variable:Variable {
  return &FieldExpression{Variable: variable.(*Variable), GraphNode: NewNode(pos(c.pos))}, nil
} / ArrayExpression / ObjectExpression

UnaryOp <- ( '+' / '-' / '!' ) {
  return string(c.text), nil
}

AddOp <- ( '+' / '-' ) {
  return string(c.text), nil
}

MulOp <- ( '*' / '/' / '%' ) {
  return string(c.text), nil
}

CmpOp <- ( "==" / "!=" / "<" / ">" / "<=" / ">=" ) {
  return string(c.text), nil
}

BinOp <- ( "&&" / "||" ) {
  return string(c.text), nil
}

String "string" <- Quote ( !EscapedChar . / '\\' EscapeSequence )* Quote {
  return strconv.Unquote(string(c.text))
}

Index <- Integer {
  return strconv.ParseInt(string(c.text), 10, 64)
}

Quote "quote" <- `"`

EscapedChar <- [\x00-\x1f"\\]
EscapeSequence <- SingleCharEscape / UnicodeEscape
SingleCharEscape <- ["\\/bfnrt]
UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

Integer <- '0' / NonZeroDecimalDigit DecimalDigit*
Exponent <- 'e'i [+-]? DecimalDigit+
DecimalDigit <- [0-9]
NonZeroDecimalDigit <- [1-9]
HexDigit <- [0-9a-f]i
Bool <- "true" { return true, nil } / "false" { return false, nil }
Null <- ("null" / "nil") { return nil, nil }

Variable <- ident:Identifier {
  return &Variable{Name: ident.(string), GraphNode: NewNode(pos(c.pos))}, nil
}

Identifier <- [a-zA-Z_] [a-zA-Z0-9_]* {
  return string(c.text), nil
}

Name <- [a-zA-Z0-9_] ('-' / [a-zA-Z0-9_])* {
  return string(c.text), nil
}

EmptyLine <- _ [\n] {
  return nil, nil
}

_ "whitespace" <- [ \t]* { return nil, nil }
__ "whitespace" <- [ \t]  { return nil, nil }
NL <- [\n] / &EOF
EOF <- !.
